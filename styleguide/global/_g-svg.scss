// SVG
//
// Styleguide 1.7

// Overrides presentation attributes in SVG file to
// Allow these values to inherit from CSS file.
svg {
  path,
  line,
  circle {
    fill: inherit;
    stroke: inherit;
    stroke-width: inherit;
  }
}

// Sets SVG to use "css color" as the fill in the SVG

.svg--fill {
  fill: currentColor;
}

// Sets SVG to use "css color" as the stroke in the SVG
.svg--stroke {
  stroke: currentColor;
}

// // Apply this mixin to the svg's wrapper
@mixin svg-wrapper($intristic-ratio) {
  @extend %svg__wrapper;
  @include ir($intristic-ratio);
}


// ///// Scale in proportion, fluid width SVGs
// // Allowing fully fluid SVG's
// // Based on http://tympanus.net/codrops/2014/08/19/making-svgs-responsive-with-css/

%svg__wrapper {
  position: relative;
  width: 100%;
  height: 0;
}

// Extend the Actual SVG with placeholder

%svg__core,
.svg__core {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// @mixin svg-centered
//
// Puts an fixed SVG inside a container of a specific size
//
// <pre>
// svg-centered($svg-width, $svg-height, $wrapper-width, $wrapper-height, $svg-class: svg)
//
// $svg-width       - Width of the SVG Icon
// $svg-height      - Height of the SVG Icon
// $wrapper-width   - Width of the container
// $wrapper-height  - Height of the container
// $svg-class       - '.svg' by default
// </pre>
//
// Styleguide 1.7.1

@mixin svg-centered($svg-width, $svg-height, $wrapper-width, $wrapper-height, $svg-class: svg) {

  @if ($wrapper-width < $svg-width or $wrapper-height < $svg-height) {
    @error ('Wrapper can not be larger the the svg');
  }

  position: relative;
  width: $wrapper-width;
  height: $wrapper-height;

  .#{$svg-class} {
    position: absolute;
    top: ($wrapper-height - $svg-height) / 2;
    left: ($wrapper-width - $svg-width) / 2;
    width: $svg-width;
    height: $svg-height;
  }
}
