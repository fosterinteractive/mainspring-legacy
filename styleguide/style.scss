

// Import Libraries
@import '../bower_components/sass-toolkit/stylesheets/toolkit';
@import '../bower_components/sassy-maps/sass/sassy-maps';
@import '../bower_components/breakpoint-sass/stylesheets/breakpoint';
@import '../bower_components/singularity/stylesheets/singularitygs';
@import '../bower_components/jacket/stylesheets/jacket';


// Kickstart
@import '../bower_components/sass-toolkit/stylesheets/toolkit/kickstart';


// Global Config (Doesn not render any CSS)
@import 'config/functions';
@import 'config/variables';
@import 'config/mixins';

// Utiltiy Functions
@import 'utility/utility';

// Global
//
// Glocal elements style default HTML Elements and user generated content
// or WYSIWYG editors. It also includes common patterns that are reused
// thoughout the site like Typography, Images, SVGs, Forms, Lists, and print styles.
//
// Uses Hacked Version of Normalize 1.99
//
// <b>Naming Patterns</b>
// <pre>
//  p ul li (Default HTML Elements)
// .g-global-style__element
// .g-global-style--modifier
// .g-global-style--modifier__element
// .g-global-style__element--modifier
// </pre>
//
// Styleguide 1.0


@import 'global/vendor/normalize';
@import 'global/g-type';
@import 'global/g-link';
@import 'global/g-list';
@import 'global/g-svg';
@import 'global/g-form';
@import 'global/g-image';
@import 'global/g-table';
// @import 'global/print';


// Components
//
// Components are discreet parts of the UI. They general can scale to fit a
// range of sizes of containers (See Layouts).
//
// Components can appear inside components. Components
// May adjust their own layouts depending on the size of their containers.
// This is typical done with [eq.js](https://github.com/Snugug/eq.js) script
// for element queries.
//
// <b>Naming Patterns</b>
// <pre>
// .c-component__element
// .c-component--modifier
// .c-component--modifier__element
// .c-component__element--modifier
// </pre>
//
// Styleguide 2.0

// Components (with EJ.js based layouts)
@import 'components/_c-btn/c-btn';
@import 'components/c-logo';
@import 'components/c-nav/c-nav';
@import 'components/c-tab/c-tab';
@import 'components/c-quote';
@import 'components/c-accordion/c-accordion';
@import 'components/c-pager/c-pager';

// Component Partial Naming Examples
// @import 'components/btn--icon';
// @import 'components/btn--accordion';
// @import 'components/menu-main';
// @import 'components/menu-mobile';
// @import 'components/menu-subfooter';
// @import 'components/masthead';
// @import 'components/summary';
// @import 'components/progress';
// @import 'components/action';
// @import 'components/person';
// @import 'components/ad';
// @import 'components/alert';
// @import 'components/listing';
// @import 'components/tabs';
// @import 'components/toggle';
// @import 'components/message';
// @import 'components/calendar';
// @import 'components/carousel'; <-- Boo ;(
// @import 'components/card';
// @import 'components/callout';
// @import 'components/cart';



// Layouts
//
// ## Custom Layouts ##
// Layouts position components in a page. They often implenent width based
// Media queries in a mobile first strategy. Typically there is a layout
// partial for different regions in the website like the page (wrapper),
// header, footer, etc. These Layouts tend to be unique and not reusable.
//
// <b>Naming Patterns</b>
// <pre>
// .l-layout__element
// .l-layout--variation
// .l-layout--modifier__element
// .l-layout__element--modifier
// .l-header
// .l-header__logo
// .l-header__tagline
// .l-header--sticky >> EG. the header is smaller & fixed postion when you scroll...
// .l-header--sticky__logo
// </pre>
//
// ## Reusable Layouts ##
// ### Media Queries ###
// Other layouts are reusable such as generic grid containers. These can be
// either (width) media query or eq.js based layouts.
// Column layouts express the number of columns with a "cols#" string, and a optionally
// a modifer which expresses the number of columns the layout has from smallest
// width to largest width.
//
// <i> Yes you can indeed used brackets and commas in css if you escape with a backslash</i>
//
// <b>Media Query Patterns</b>
// <pre>
// .l-2cols >> 2 columns (equal width)
// .l-2cols--1-2 >> 1 column @ default width, 2 columns @ larger width
// .l-5col--1-2-5 >> 1 to 2 to 5 columns as the width increases
// .l-2cols(25,75) >> 2 columns in ratio of 25% to 75%
// </pre>
//
// ### eq.js ###
// eq.js "breakpoints" are defined in HTML. This allows them to be more
// flexible as you can simply add or remove "data-eq-pts" in your data attibutes
// of the layout wrapper class. Details are in the [eq.js](https://github.com/Snugug/eq.js) docs.
//
//
// ```
//
// <div class="l-eq" data-eq-pts="l-eq--2col: 400 l-eq--3col: 600"> CONTENT
// </div>
// ```
// <b>eq.js Patterns</b>
// <i>
// <pre>
// .l-eq--2cols >> 2 columns when
// .l-eq--5cols
// .l-eq--2col--1-2(60,40)  >> 1 to 2 columns. 2 columns in ratio of 60% 40% .
// </pre>
//
// Styleguide 3.0

@import 'layouts/l-eq';
@import 'layouts/l-page';
@import 'layouts/l-form';

// Other Layout Naming Examples
// @import 'layouts/l-header';
// @import 'layouts/l-page';
// @import 'layouts/l-2col';
// @import 'layouts/l-5col';
// @import 'layouts/l-megamenu';
// @import 'layouts/l-footer';
// @import 'layouts/l-form';

// Utility
//
// Generic modifier components. Oftern extended from other components. Each
// Utility should be very specific and do only 1 job. This seciton also documents
// Generic Mixins and Extendables
//
// <b>Utility Naming Patterns</b>
// <pre>
// .u-utility__element
// .u-utility--modifier
// .u-utility--modifier__element
// .u-utility__element--modifier
// </pre>
//
// <b>Mixin Naming Patterns</b>
// @TODO
//
// Styleguide 4.0

@import 'utility/u-remove-child';


// Vendor
// @import 'vendor/system.base';
// @import 'vendor/remodal';
// @import 'vendor/slidebar';
// @import 'vendor/slick';
